buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:0.4.0'
        classpath 'com.moowork.gradle:gradle-node-plugin:0.8'
    }
}

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'coveralls'
apply plugin: 'application'
apply plugin: 'com.moowork.node'

defaultTasks 'build'

version = '0.3-SNAPSHOT'

def libs = [
        gson              : 'com.google.code.gson:gson:2.2.4',
        molecule          : 'com.vtence.molecule:molecule:0.4',
        simple            : 'org.simpleframework:simple:5.1.6',
        jmustache         : 'com.samskivert:jmustache:1.9',
        hamcrest_all      : 'org.hamcrest:hamcrest-all:1.3',
        junit             : 'junit:junit:4.11@jar',
        jmock             : 'org.jmock:jmock:2.6.0@jar',
        jmock_junit4      : 'org.jmock:jmock-junit4:2.6.0@jar',
        htmlunit          : 'net.sourceforge.htmlunit:htmlunit:2.14',
        molecule_test     : 'com.vtence.molecule:molecule:0.4:tests',
        hamcrest_dom      : ['com.google.guava:guava:15.0',
                             'org.antlr:antlr-runtime:3.0.1',
                             'com.3levers.cssselectors:cssselectors:1.0@jar',
                             'org.testinfected.hamcrest-matchers:dom-matchers:1.5@jar'],
]

repositories {
    mavenCentral()
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
}

dependencies {
    compile libs.gson
    compile libs.molecule
    compile libs.simple
    compile libs.jmustache

    testCompile libs.hamcrest_all
    testCompile libs.junit
    testCompile libs.jmock
    testCompile libs.jmock_junit4
    testCompile libs.htmlunit
    testCompile libs.molecule_test
    testCompile libs.hamcrest_dom
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

task coverage(dependsOn: ['test', 'jacocoTestReport'])

task wrapper(type: Wrapper) {
    gradleVersion = '2.1'
}

ext {
    jasmineDependencies = ['karma', 'karma-jasmine@2_0', 'karma-phantomjs-launcher']
    karmaExec = file('node_modules/karma/bin/karma')
    karmaConfig = 'src/test/resources/karma.conf.js'
}

task jasmineSetup(type: NpmTask) {
    outputs.dir file('node_modules')
    args = ['install', '--loglevel', 'error'] + jasmineDependencies
}

task jasmineRun(type: NodeTask, dependsOn: 'jasmineSetup') {
    script = karmaExec
    args = ['start', karmaConfig, '--single-run']
}

task jasmineWatch(type: NodeTask, dependsOn: 'jasmineSetup') {
    script = karmaExec
    args = ['start', karmaConfig]
}

test.dependsOn jasmineRun

mainClassName = 'com.vtence.jyose.JYose'
applicationName = 'jyose'

if (!project.hasProperty('port')) {
    ext.port = 8080
}

run {
    args port
    args file('src/main/webapp')
}

task stage(dependsOn: ['clean', 'installApp'])
